{
    "Parameters": {
        "StackName": {
            "Description": "An stack name that will be prefixed to resource names",
            "Type": "String"
        },
        "VpcId": {
            "Description": "A vpc id for security groups",
            "Type": "String"
        },
        "SubnetId": {
            "Description": "A subnet id for EC2 instance",
            "Type": "String"
        },
        "SubnetId2": {
            "Description": "A subnet id for EC2 instance",
            "Type": "String"
        },
        "BucketName": {
            "Description": "A S3 bucket name",
            "Type": "String"
        }
    },
    "Resources": {
        "EC2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "AvailabilityZone": "us-east-1a",
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sdm",
                        "Ebs": {
                            "VolumeSize": "20",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "DisableApiTermination": "false",
                "ImageId": "ami-9887c6e7",
                "InstanceType": "t2.micro",
                "KeyName": "csye6225-keypair",
                "SecurityGroupIds": [
                    {
                        "Fn::GetAtt": [
                            "InstanceSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "SubnetId": {
                    "Ref": "SubnetId"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash -xe ",
                                "sudo yum install ruby ntp wget java-1.8.0-openjdk-devel -y",
                                "sudo systemctl start ntpd",
                                "sudo systemctl enable ntpd",
                                "sudo groupadd tomcat",
                                "sudo useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat",
                                "cd /tmp",
                                "wget http://apache.mirrors.pair.com/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz",
                                "sudo mkdir /opt/tomcat",
                                "sudo tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1",
                                "cd /opt/tomcat",
                                "sudo chgrp -R tomcat /opt/tomcat",
                                "sudo chmod -R g+r conf",
                                "sudo chmod g+x conf",
                                "sudo chown -R tomcat webapps/ work/ temp/ logs/",
                                "cd /home/centos",
                                "sudo touch tomcat.service",
                                "sudo echo '[Unit]' > tomcat.service",
                                "echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
                                "echo 'After=syslog.target network.target' >> tomcat.service",
                                "echo '[Service]' >> tomcat.service",
                                "echo 'Type=forking' >> tomcat.service",
                                "echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
                                "echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
                                "echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
                                "echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
                                "echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
                                "echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
                                "echo 'User=tomcat' >> tomcat.service",
                                "echo 'Group=tomcat' >> tomcat.service",
                                "echo 'UMask=0007' >> tomcat.service",
                                "echo 'RestartSec=10' >> tomcat.service",
                                "echo 'Restart=always' >> tomcat.service",
                                "echo '[Install]' >> tomcat.service",
                                "echo 'WantedBy=multi-user.target' >> tomcat.service",
                                "sudo mv tomcat.service /usr/lib/systemd/system",
                                "cd /usr/lib/systemd/system",
                                "sudo systemctl daemon-reload",
                                "#systemctl start cloudwatch.service",
                                "#systemctl enable cloudwatch.service",
                                "sudo systemctl enable tomcat.service",
                                "sudo systemctl start tomcat.service"
                            ]
                        ]
                    }
                }
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": "csye6225-webapp",
                "GroupDescription": "Security Group for EC2 instance via port 22,80,443",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "22",
                        "ToPort": "22"
                    },
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "80",
                        "ToPort": "80"
                    },
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "ToPort": "443"
                    },
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "8080",
                        "ToPort": "8080"
                    }
                ]
            }
        },
        "DBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": "csye6225-rds",
                "GroupDescription": "Enable TCP traffic on 3306",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "SourceSecurityGroupId": {
                            "Ref": "InstanceSecurityGroup"
                        }
                    }
                ]
            }
        },
        "MyDB": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "AllocatedStorage": "100",
                "DBInstanceClass": "db.t2.medium",
                "Engine": "MySQL",
                "MultiAZ": "false",
                "DBInstanceIdentifier": "csye6225-spring2018",
                "EngineVersion": "5.7.23",
                "PubliclyAccessible": "false",
                "Iops": "1000",
                "DBName": "csye6225",
                "DBSubnetGroupName": {
                    "Ref": "MyDBSubnetGroup"
                },
                "MasterUsername": "csye6225master",
                "MasterUserPassword": "csye6225password"
            }
        },
        "MyDBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Subnets available for the RDS DB Instance",
                "SubnetIds": [
                    {
                        "Ref": "SubnetId"
                    },
                    {
                        "Ref": "SubnetId2"
                    }
                ]
            }
        },
        "DynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "Id",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "Id",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "5",
                    "WriteCapacityUnits": "5"
                },
                "TableName": "csye6225"
            }
        },
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Ref": "BucketName"
                }
            }
        }
    },
    "Outputs": {
        "InstanceId": {
            "Description": "InstanceId of the newly created EC2 instance",
            "Value": {
                "Ref": "EC2Instance"
            }
        },
        "AZ": {
            "Description": "Availability Zone of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Instance",
                    "AvailabilityZone"
                ]
            }
        },
        "PublicDNS": {
            "Description": "Public DNSName of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Instance",
                    "PublicDnsName"
                ]
            }
        },
        "PublicIP": {
            "Description": "Public IP address of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Instance",
                    "PublicIp"
                ]
            }
        }
    }
}